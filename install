#!/bin/bash
set -euo pipefail
APP=sst

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[38;2;255;140;0m'
NC='\033[0m' # No Color

os=$(uname -s | tr '[:upper:]' '[:lower:]')
arch=$(uname -m)

filename="$APP-$os-$arch.tar.gz"

case "$filename" in
    *"-linux-"*)
        [[ "$arch" == "x86_64" || "$arch" == "arm64" || "$arch" == "i386" ]] || exit 1
    ;;
    *"-darwin-"*)
        [[ "$arch" == "x86_64" || "$arch" == "arm64" ]] || exit 1
    ;;
    *)
        echo "${RED}Unsupported OS/Arch: $os/$arch${NC}"
        exit 1
    ;;
esac

INSTALL_DIR=$HOME/.sst/bin
mkdir -p "$INSTALL_DIR"

url="https://github.com/sst/ion/releases/latest/download/$filename"

latest_version=$(curl -s https://api.github.com/repos/sst/ion/releases/latest | grep -oP '(?<="tag_name": ")[^"]+' | sed 's/^v//')

print_message() {
    local level=$1
    local message=$2
    local color=""
    
    case $level in
        info) color="${GREEN}" ;;
        warning) color="${YELLOW}" ;;
        error) color="${RED}" ;;
    esac
    
    echo -e "${color}${message}${NC}"
}

if [[ $? -ne 0 ]]; then
    print_message error "Failed to fetch latest version"
    exit 1
fi

check_version() {
    if command -v sst >/dev/null 2>&1; then
        installed_version=$(sst version)
        
        if [[ "$installed_version" != "$latest_version" ]]; then
            read -p "${GREEN}Update to latest version (${YELLOW}$latest_version${NC})? (y/n)${NC} " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        else
            print_message info "Latest version $latest_version already installed"
            exit 0
        fi
    fi
}

download_and_install() {
    print_message info "Downloading $filename version: $latest_version ..."
    mkdir -p ssttmp && cd ssttmp
    curl -# -L $url | tar xz
    mv sst $INSTALL_DIR
    cd .. && rm -rf ssttmp
    print_message info "Installed $filename to $INSTALL_DIR"
}

check_version
download_and_install

add_to_path() {
    local config_file=$1
    local command=$2
    
    if [[ -w $config_file ]]; then
        echo -e "\n# sst" >> "$config_file"
        echo "$command" >> "$config_file"
        print_message info "Added $INSTALL_DIR to \$PATH in $config_file"
    else
        print_message warning "Manually add the directory to $config_file (or similar):"
        print_message info "  $command"
    fi
}

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

declare -A shell_config_files=(
    [fish]="$HOME/.config/fish/config.fish"
    [zsh]="$HOME/.zshrc $HOME/.zshenv $XDG_CONFIG_HOME/zsh/.zshrc $XDG_CONFIG_HOME/zsh/.zshenv"
    [bash]="$HOME/.bashrc $HOME/.bash_profile $XDG_CONFIG_HOME/bash/.bashrc $XDG_CONFIG_HOME/bash/.bash_profile"
)

current_shell=$(basename "$SHELL")

config_files=${shell_config_files[$current_shell]}

if [[ -z $config_files ]]; then
    config_files="$HOME/.bashrc $HOME/.bash_profile $XDG_CONFIG_HOME/bash/.bashrc $XDG_CONFIG_HOME/bash/.bash_profile"
fi

config_file=""
for file in $config_files; do
    if [[ -f $file ]]; then
        config_file=$file
        break
    fi
done

if [[ -z $config_file ]]; then
    print_message error "No config file found for $current_shell. Checked files: ${config_files[@]}"
    exit 1
fi

if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
    case $current_shell in
        fish)
            add_to_path "$config_file" "fish_add_path $INSTALL_DIR"
        ;;
        zsh)
            add_to_path "$config_file" "export PATH=$INSTALL_DIR:\$PATH"
        ;;
        bash)
            add_to_path "$config_file" "export PATH=$INSTALL_DIR:\$PATH"
        ;;
        *)
            print_message warning "Manually add the directory to $config_file (or similar):"
            print_message info "  export PATH=$INSTALL_DIR:\$PATH"
        ;;
    esac
fi

if [ -n "${GITHUB_ACTIONS-}" ] && [ "${GITHUB_ACTIONS}" == "true" ]; then
    echo "$INSTALL_DIR" >> $GITHUB_PATH
    print_message info "Added $INSTALL_DIR to \$GITHUB_PATH"
fi